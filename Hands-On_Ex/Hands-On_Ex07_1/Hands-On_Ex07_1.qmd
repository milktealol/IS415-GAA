---
title: "Hands On Exercise 7.1"
author: "Daniel Chng"
date: "19 February 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  eval: true
  echo: true
  message: false
  warning: false
editor: visual
---

::: callout-note
Note: First 4 sections is the same as HON7
:::

Reference from <https://r4gdsa.netlify.app/chap10.html>

Learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA)

End of this exercise will learn how to

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

# 1. Setting up Analytical Tools

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

# 2. Importing of data

## 2.1 Importing Shape File

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

::: callout-note
st_read is from sf package, so imported file will be in simple feature object of sf

Do remember to also check the environment file
:::

## 2.2 Importing csv file

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 2.3 Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

## 2.4 Visualising Regional Development Indicator

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# 3. Global Spatial Autocorrelation

Learn how to compute global spatial autocorrelation statistics to perform spatial complete randomness test

## 3.1 Computing Contiguity Spatial Weights

Uses Queens contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

::: callout-note
Summary report shows that there are 88 area units in Hunan. Most connected area unit has 11 neighbours. There are 2 area units with only 1 neighbor.
:::

## 3.2 Row-standardized Weights Matrix

Assigning weights to each neighboring polygon.

Using style="w", it will assign equal weights

Equal weights is by assigning fraction 1/(#neighbors) to each neighboring country, then summing the weighted income values

Drawback: Polygons along edges of study area will base their lagged values on fewer polygons, thus potentially over-or under-estimate true nature of spatial autocorrelation

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

## 3.3 Gobal Spatial Autocorrelation: Moran's I

### 3.3.1 Maron's I Test

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

### 3.3.2 Computing Monte Carlo Moran's I

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

### 3.3.3 Visualizing Monte Carlo Moran's I

Good practice to examine simulated Moran's I test statistics in greater detail

Can be achieved by plotting distribution of statistical values as histogram by the codes below

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

## 3.4 Global Spatial Autocorrelation: Geary's

### 3.4.1 Geary's C Test

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

### 3.4.2 Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

### 3.4.3 Visualizing Monte Carlo Geary's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

# 4. Spatial Correlogram

Spatial Correlogram good for examining patterns of spatial autocorrelation in data or model residuals.

Shows how correlated pairs of spatial observations when you increase distance (lag) between them

## 4.1 Computing Moran's I Correlogram

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

## 4.2 Examining Analysis Report

By plotting, it does not provide complete interpretation. Hence important to examine full analysis report

```{r}
print(MI_corr)
```

## 4.3 Computing Geary's C Correlogram and Plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

## 4.4 Examining Analysis Report

```{r}
print(GC_corr)
```

# 5. Clustering and Outlier Analysis

## 5.1 Calculating local Moran's I of GDPPC2023 at the country level

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran\'s I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

## 5.2 List content of local Moran matrix

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

### 5.2.1 Mapping local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### 5.2.2 Mapping local Moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### 5.2.3 Mapping local Moran's I p-values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### 5.2.4 Mapping both local Moran's I value and p-value

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

# 6. Creating LISA Cluster Map

LISA Cluster Map shows significant locations color by type of spatial autocorrelation

To generate LISA cluster map is to first plot the Moran scatterplot

## 6.1 Plotting Moran scatterplot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

::: callout-note
Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.
:::

## 6.2 Plotting Moran Scatterplot with Standardised Variable

Using scale() to center and scale variable

Centering is done by subtracting the mean (omitting NAs) and scaling is done by dividing the (centered) variable by the standard deviations

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

::: callout-note
as.vector used to make sure data type gotten out is a vector that map neatly into our dataframe
:::

## 6.3 Plotting Scatterplot again

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

## 6.4 Preparing LISA map classes

Preparing LISA cluster map

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Derives spatially lagged variable of interest and centers spatially lagged variable around its mean

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

Centering local Moran's around the mean

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Set statistical significance level for local Moran

```{r}
signif <- 0.05
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

Placing non-significant Moran into cat 0

```{r}
quadrant[localMI[,5]>signif] <- 0
```

## 6.5 Shortcut, combining steps

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

## 6.6 Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

## 6.7 Plotting Local Moran's L value and p-value map

Helps with visualization

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

# 7. Hot Spot and Cold Spot Area Analysis

Besides detecting cluster and outlier, localised spatial statistics can be used to detect hot spot and/or cold spot area

-   Hot spot: Region or value with higher relative to its surroundings

## 7.1 Getis and Ord's G-statistics

It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix

-   Computing Gi statistics

-   Mapping Gi statistics

## 7.2 Deriving distance-based weight matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

### 7.2.1 Deriving Centroid

We will need to associate each polygon before making the connectivity graph.

To do so, need the mapping function. This applies a given function to each element of a vector and returns a vector of the same length

Input vector will be geometry column of us.bound. Our function will be st_centroid(). also using map_dbl variation of map from purr package

To get longitude values we map st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket \[\[\]\] and 1, getting first value of each centroid

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Do the same for latitude using 2

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

binding them together

```{r}
coords <- cbind(longitude, latitude)
```

### 7.2.2 Determine cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### 7.2.3 Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

### 7.2.4 Converting nb object into spatial weights object

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

## 7.3 Computing adaptive distance weight matrix

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

### 7.3.1 Convertinf nb object to spatial weights object

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

# 8. Computing Gi statistics

## 8.1 Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

## 8.2 Joining values to correspond hunan sf data frame

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

## 8.3 Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

## 8.4 Gi statistics using adaptive distance

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

## 8.5 Mapping Gi values using adaptive distance weights

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```
