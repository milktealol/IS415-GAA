---
title: "Hands On Exercise 6"
author: "Daniel Chng"
date: "13 February 2023"
date-modified: "`r Sys.Date()`"
format: html
execute: 
  eval: true
  echo: true
  message: false
  warning: false
editor: visual
---

::: callout-note
Note, HONs uses spdep but ICE uses sfdep

always clear environment when working on different project.
:::

# 1. Getting started

## 1.1 Importing Packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 1.2 Importing Data

Imported shapefile will be simple features Object of sf

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## 1.3 Importing CSV file

Output is R dataframe class

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 1.4 Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# 2. Visualising Regional Development Indicator

Preparing basemap and choropleth map showing distribution of GDPPC 2012

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# 3. Computing Contiguity Spatial Weights

::: callout-note
Note this is using spdep which uses sp not sf.

In-class using sfdep which uses sf
:::

## 3.1 Computing (QUEEN) contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

### 3.1.1 Seeing neighbours for first polygon in object

```{r}
wm_q[[1]]
```

### 3.2.1 Retrieving  country name of polygon id 1

```{r}
hunan$County[1]
```

### 3.2.2 Retreving GDPPC of these 5 countries

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### 3.2.3 Displaying complete weight matrix

```{r}
str(wm_q)
```

## 3.3 Creating (ROOK) contiguity based neighbours

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

## 3.4 Visualising contiguity weights

### 3.4.1 Using Longtitude

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

### 3.4.2 Using longitude

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

### 3.4.3 Binding them to same object

```{r}
coords <- cbind(longitude, latitude)
```

### 3.4.4 Checking first few observation

Check if formatted correctly

```{r}
head(coords)
```

### 3.4.5 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 3.4.6 Plotting Rooks Contiguity based neighbour map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 3.4.7 Plotting Queen and Rook

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

# 4. Computing distance based neighbour

## 4.1 Determine cut off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Summary shows largest first nearest neighbour distance is 61.79km. Using this upper threshold gives certainty that all units have at least 1 neighbour

## 4.2 Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

### 4.2.1 Display content of wm_d62 weight matrix

```{r}
str(wm_d62)
```

### 4.2.2 Another way of displaying using table and card

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 4.2.2.1 Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

::: callout-note
Red line shows links of 1st nearest neighbour and black shows links of neighbours within cut-off distance of 62km
:::

#### 4.2.2.2 Alternative way of plotting

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### 4.2.3 Computing adaptive distance weight matrix

One characteristic of fixed distance weight matrix

-   more densely settled area more neighbour

-   Less densely settled area less neighbour

It is possible to control number of neighbours directly using K-nearest neighbour by

-   Accepting asymmetric neighbours or

-   imposing symmetry using code below

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Similarly, can display content of matrix using str()

```{r}
str(knn6)
```

::: callout-note
Noted that each country has 6 neighbours, no less no more
:::

# 5. Weights based on IDW

Derive spatial weight matrix based on Inversed Distance method

## 5.1 Computer distance between areas

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## 5.2 Row-standardised weight matrix

Assigning weights to each neighbouring polygon

Drawbacks

-   Polygons along edge of study area will base their lagged values on fewer polygons

-   Potentially over-or under-estimating true nature of spatial autocorrelation

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

::: callout-note
Policy True allows list of non-neighbours

Policy False will return an error if missing neighbours
:::

### 5.2.1 View weights of first polygon's eight neighbour type

```{r}
rswm_q$weights[10]
```

### 5.2.2 Deriving row standardised distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# 6. Application of Spatial Weight Matrix

In this section, you will learn how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum.

## 6.1 Spatial lag with row-standardized weights

Compute avg neighbour GDPCC for eaach polygon (spatially lagged values)

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

## 6.2 Retriving GDPPC of 5 countries

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### 6.2.1 Append values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

### 6.2.2 View avg income values

```{r}
head(hunan)
```

### 6.2.3 Plotting GDPPC and spatial lag GDPPC

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

#### 6.2.3.1 Spatial lag as a sum of neighboring values

Applys a function across each value in neighbour structure

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

#### 6.2.3.2 Computing lag variable from weight and GDPPC

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

#### 6.2.3.3 Examine results

```{r}
lag_sum
```

#### 6.2.3.3 Appending lag sum GDPPC into hunan sf df

```{r}
hunan <- left_join(hunan, lag.res)
```

#### 6.2.3.4 Plotting

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

#### 6.2.3.5 Spatial window avg

To add diagonal element to neighbour list

```{r}
wm_qs <- include.self(wm_q)
```

#### 6.2.3.6 Viewing neighbour list

```{r}
wm_qs[[1]]
```

#### 6.2.3.7 Obtaining weights

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

#### 6.2.3.8 Create lag variable from weight structure and GDPPC variable

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

#### 6.2.3.9 Converting lag variable listw object into df

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

#### 6.2.3.10 Append lag_window_avg GDPPC into hunan sf df

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

#### 6.2.3.11 Comparing values

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

#### 6.2.3.12 Plotting map for quick comparison

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 6.2.4 Spatial window sum

Spatial window sum is the counter part of window avg, but without using row-standardized weights

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

#### 6.2.4.1 Assign binary weights

Includes diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

::: callout-note
Notice now \[1\] has 6 neighbours instead of 5
:::

#### 6.2.4.2 Explicitly assigning weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

#### 6.2.4.3 Computing lag variables with lag.listw()

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

#### 6.2.4.4 Convert lag variable listw into df

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

#### 6.2.4.5 Appending w_sum GDPPC onto hunan sf df

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

### 6.2.5 Comparing values

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

### 6.2.6 Plotting maps

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
